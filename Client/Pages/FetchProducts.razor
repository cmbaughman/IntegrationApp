@page "/fetchproducts"

@inject HttpClient Http

<h3>Products List</h3>

@if (errorMessage != null) {
    <p class="text-danger">@errorMessage</p>
}

<ul>
    @if (products != null) {
        foreach (var product in products) {
            <li>@product.Name</li>
        }
    }
    else {
        <li>Loading...</li>
    }
</ul>

@code {
    private Product[]? products;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try {
            errorMessage = null;
            HttpResponseMessage response = await Http.GetAsync("http://localhost:5251/api/products");

            if (!response.IsSuccessStatusCode) {
                errorMessage = $"Error: {response.StatusCode} - {response.ReasonPhrase}";
                products = null;
                return;
            }
            
            products = await response.Content.ReadFromJsonAsync<Product[]>();

            if (products == null) {
                errorMessage = "Failed to deserialize product data.";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: {ex.Message}";
            products = null;
        }
        catch (TaskCanceledException ex)
        {
            errorMessage = "Request timed out.";
            products = null;
        }
        catch (Exception ex) {
            Console.WriteLine(ex.Message);
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            products = null;
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public required string Name { get; set; }
        public double Price { get; set; }
        public int Stock { get; set; }
    }
}   
